"use strict";(()=>{var a={};a.id=662,a.ids=[662],a.modules={37:a=>{a.exports=import("uuid")},336:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>m});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(3942),j=c(8112),k=c(8766),l=a([i]);i=(l.then?(await l)():l)[0];let n=(0,h.M)(i,"default"),o=(0,h.M)(i,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/login",pathname:"/api/login",bundlePath:"",filename:""},userland:i,distDir:".next",projectDir:""});async function m(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/login"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),i=p.instrumentationOnRequestError.bind(p),l=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/login",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await l(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},l))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}d()}catch(a){d(a)}})},762:a=>{a.exports=import("@neondatabase/serverless")},3942:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{default:()=>j});var e=c(762),f=c(4729),g=c.n(f),h=c(37),i=a([e,h]);[e,h]=i.then?(await i)():i;let k=process.env.DATABASE_URL;async function j(a,b){if("POST"!==a.method)return b.status(405).json({message:"Method Not Allowed"});let{email:c,password:d}=a.body;if(!c||!d)return b.status(400).json({message:"Email and password are required."});let f=new e.Pool({connectionString:k});try{let e=await f.query("SELECT id, email, password_hash FROM users WHERE email = $1",[c]);if(0===e.rows.length)return b.status(401).json({message:"Invalid credentials."});let i=e.rows[0],j=i.password_hash;if(!await g().compare(d,j))return b.status(401).json({message:"Invalid credentials."});let k=a.headers["x-forwarded-for"]||a.socket.remoteAddress||"unknown",l=(0,h.v4)(),m=new Date(Date.now()+36e5);await f.query("INSERT INTO sessions (session_id, user_id, ip_address, expires_at) VALUES ($1, $2, $3, $4)",[l,i.id,k,m]),b.status(200).json({message:"Login successful!",user:{id:i.id,email:i.email},sessionId:l,expiresAt:m.toISOString()})}catch(a){console.error("Database or server error during login:",a),b.status(500).json({message:"An internal server error occurred."})}finally{await f.end()}}d()}catch(a){d(a)}})},4729:a=>{a.exports=require("bcryptjs")},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")}};var b=require("../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=336));module.exports=c})();